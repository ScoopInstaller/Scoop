# Usage: scoop import <path/url to scoopfile.json>
# Summary: Imports apps, buckets and configs from a Scoopfile in JSON format

param(
    [Parameter(Mandatory)]
    [String]
    $scoopfile
)

. "$PSScriptRoot\..\lib\buckets.ps1" # Get-LocalBucket
. "$PSScriptRoot\..\lib\manifest.ps1"

$import = $null
$bucket_names = @()
$def_arch = default_architecture

if (Test-Path $scoopfile) {
    $import = parse_json $scoopfile
} elseif ($scoopfile -match '^(ht|f)tps?://|\\\\') {
    $import = url_manifest $scoopfile
}

if (!$import) { abort 'Input file not a valid JSON.' }

if ($null -ne $import.config.PSObject.Properties) {
    $import.config.PSObject.Properties | ForEach-Object {
        set_config $_.Name $_.Value | Out-Null
        Write-Host "'$($_.Name)' has been set to '$($_.Value)'"
    }
}

if ($null -ne $import.buckets){
    $local_buckets = Get-LocalBucket
    $import.buckets | ForEach-Object {
        if($_.Name -in $local_buckets){
            Write-Host "'$($_.Name)' is already in your local bucket. It won't be added again."
            $bucket_names += $_.Name
        }else {
            add_bucket $_.Name $_.Source
            $bucket_names += $_.Name
        }
    }
}

if ($null -ne $import.apps) {
    $import.apps | ForEach-Object {
        $info = $_.Info -Split ', '
        $global = if ('Global install' -in $info) {
            ' --global'
        } else {
            ''
        }
        $arch = if ('64bit' -in $info -and '32bit' -eq $def_arch) {
            ' --arch 64bit'
        } elseif ('32bit' -in $info -and '64bit' -eq $def_arch) {
            ' --arch 32bit'
        } else {
            ''
        }

        $app = if ($_.Source -in $bucket_names) {
            "$($_.Source)/$($_.Name)"
        } elseif ($_.Source -eq '<auto-generated>') {
            "$($_.Name)@$($_.Version)"
        } else {
            $_.Source
        }

        & "$PSScriptRoot\scoop-install.ps1" $app$global$arch

        if ('Held package' -in $info) {
            & "$PSScriptRoot\scoop-hold.ps1" $($_.Name)$global
        }
    }
}
